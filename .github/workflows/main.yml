name: CI

on:
  push:
    branches: [ master ]
jobs:
  build:
    name: Build and Pushing the Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: argocd

      run: |
      # Build a docker container and push it to ECR
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
      # Build the image with docker-compose
        docker-compose -f ./docker-compose.yml build web
      # Tag the image with the git hash and the repository name
        docker tag my_app_web $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
        echo "Pushing image to ECR..."
      # Push the image to the ECR registry
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"


    - name: Update Version
      # Check if the file exists before running the command
      run: |
        if [ -f "./helm/values.yaml" ]; then
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          version=$(cat ./helm/values.yaml | grep version: | awk '{print $2}')
          sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./helm/values.yaml
        else
          echo "values.yaml file not found"
        fi
    - name: Commit and push changes
      uses: devops-infra/action-commit-push@v0.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        commit_message: Version updated
